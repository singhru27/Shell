CODE STRUCTURE:

The basic structure of my implementation of Shell_2 functionality is as follows. When main is called and the REPL is first entered, ignore_signals() is called. This sets the shell to ignore the signals for SIGINT, SIGTSTP, SIGQUIT, and SIGTTOU. 

After this function call, reap_children() is called. This loops through all terminated, stopped, and continued child processes, and reaps accordingly. If a program has been suspended or continued, the appropriate message is printed out. 

After these function calls, the execute_built_in_commands () function is called. This function checks to see if fg or bg was an inputed command. If so, it error checks to ensure the correct number of arguments were passed in, that the argument was passed in with the correct format, and that the given job does exist. If the job does exist, the function sends the SIGCONT to the given process and runs it in the background or foreground depending on whether the command was fg or bg.

If the command input into standard input was not a built in command, it is assumed to be the path to an executable. In this case, run_executable is called. First, the signal handlers for the ignored signals are reset to their default handlers in the child process. This function then checks to see if the & argument was input by the user. If it was, the given process is run in the background (by not changing the process group ID of the window and not waiting for program execution before reprinting the shell prompt). If the function was intended to be run in the foreground, terminal control is transferred to the given process, and the shell waits for program execution before continuing. 

This function handles the printing and transfer of window control if the foreground process was stopped or terminated with the SIGINT or SIGSTOP signal. 

Following the completion of the aforementioned code, the PGID of the window is reset to that of the shell to once again make the shell the foreground process. The function returns, and the REPL is restarted.  

BUGS:
My program has no known bugs

COMPILATION INSTRUCTIONS:
make 33sh will compile just the prompted shell. make 33noprompt will compile just the no prompt shell. Make all will compile both version of the shell. Make clean will remove all executables from the directory.